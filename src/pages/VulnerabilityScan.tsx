import { useState, useEffect } from 'react';
import AppLayout from '@/components/layout/AppLayout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  RefreshCw, 
  AlertTriangle, 
  CheckCircle, 
  Shield, 
  FileText, 
  Code, 
  BarChart3,
  Play,
  StopCircle,
  Eye,
  EyeOff,
  Copy
} from 'lucide-react';

interface ScanResult {
  success: boolean;
  file_path?: string;
  yaml_path?: string;
  yaml_exists?: boolean;
  constraints_count?: number;
  risks_count?: number;
  static_risks_count?: number;
  context_enhanced_risks_count?: number;
  constraints?: Array<{
    description: string;
    severity: string;
  }>;
  risks?: Array<{
    description: string;
    severity: string;
    impact?: string;
  }>;
  hardened_code?: string[];
  agent_context?: {
    has_prompt_injection_risk?: boolean;
    uses_dynamic_tool_routing?: boolean;
    has_code_execution_capability?: boolean;
    has_file_system_access?: boolean;
    has_network_access?: boolean;
    severity_multipliers?: Record<string, number>;
  };
  effectiveness_analysis?: {
    effectiveness: string;
    addressed_risks: number;
    remaining_risks: number;
    total_risks: number;
  };
  message?: string;
  error?: string;
  timestamp?: string;
  scan_id?: number;
}



const VulnerabilityScan = () => {
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanHistory, setScanHistory] = useState<ScanResult[]>([]);
  const [selectedFile, setSelectedFile] = useState<string>('');
  const [scanType, setScanType] = useState<'single' | 'directory'>('single');
  const [showCode, setShowCode] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch scan results from the Flask backend
  const fetchScanResults = async () => {
    try {
      const response = await fetch('/api/results');
      const data = await response.json();
      if (data && Object.keys(data).length > 0) {
        setScanResults(data);
      }
    } catch (error) {
      console.error('Error fetching scan results:', error);
    }
  };

  // Fetch scan history
  const fetchScanHistory = async () => {
    try {
      const response = await fetch('/api/history');
      const data = await response.json();
      setScanHistory(data);
    } catch (error) {
      console.error('Error fetching scan history:', error);
    }
  };

  // Start a new scan
  const startScan = async () => {
    if (!selectedFile.trim()) {
      alert('Please select a file or directory to scan');
      return;
    }

    setIsScanning(true);
    try {
      const response = await fetch('/api/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          agent_path: selectedFile,
          scan_type: scanType
        }),
      });

      if (response.ok) {
        // Poll for results
        const pollInterval = setInterval(async () => {
          await fetchScanResults();
          await fetchScanHistory();
          
          // Check if scan is complete
          const latestResponse = await fetch('/api/results');
          const latestData = await latestResponse.json();
          
          if (latestData && latestData.timestamp && 
              (!scanResults || latestData.timestamp !== scanResults.timestamp)) {
            setIsScanning(false);
            clearInterval(pollInterval);
          }
        }, 2000);

        // Timeout after 60 seconds
        setTimeout(() => {
          setIsScanning(false);
          clearInterval(pollInterval);
        }, 60000);
      } else {
        throw new Error('Failed to start scan');
      }
    } catch (error) {
      console.error('Error starting scan:', error);
      setIsScanning(false);
    }
  };

  // Copy code to clipboard
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  // Get severity color
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-500 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-black';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-blue-500 text-white';
    }
  };

  // Get effectiveness color
  const getEffectivenessColor = (effectiveness: string) => {
    switch (effectiveness.toLowerCase()) {
      case 'high': return 'text-green-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  useEffect(() => {
    fetchScanResults();
    fetchScanHistory();
    
    // Set up polling for real-time updates
    const interval = setInterval(() => {
      if (!isScanning) {
        fetchScanResults();
        fetchScanHistory();
      }
    }, 5000);

    return () => clearInterval(interval);
  }, [isScanning]);

  return (
    <AppLayout latestScanTime={scanResults?.timestamp || scanHistory[0]?.timestamp}>
      <div className="p-8 space-y-8 bg-gray-100 min-h-screen">
        <div className="bg-white rounded-lg p-8 shadow-sm space-y-8">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div className="flex flex-col gap-2">
              <h1 className="text-2xl font-bold tracking-tight">Vulnerability Scan</h1>
              <p className="text-muted-foreground">
                Comprehensive security scanning and vulnerability assessment tools
              </p>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => {
                  fetchScanResults();
                  fetchScanHistory();
                }}
                disabled={isScanning}
                className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50"
              >
                <RefreshCw size={16} />
                Refresh
              </button>
            </div>
          </div>

          {/* Scan Controls */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield size={20} />
                Scan Configuration
              </CardTitle>
              <CardDescription>
                Configure and start a new security scan
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Scan Type</label>
                    <select
                      value={scanType}
                      onChange={(e) => setScanType(e.target.value as 'single' | 'directory')}
                      className="w-full p-2 border rounded-md"
                    >
                      <option value="single">Single File</option>
                      <option value="directory">Directory</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Target Path</label>
                    <input
                      type="text"
                      value={selectedFile}
                      onChange={(e) => setSelectedFile(e.target.value)}
                      placeholder={scanType === 'single' ? '/path/to/agent.py' : '/path/to/directory'}
                      className="w-full p-2 border rounded-md"
                    />
                  </div>
                </div>
                
                {/* Example Paths */}
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-medium text-blue-800 mb-2">Example Paths:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                    <div>
                      <p className="font-medium text-blue-700">Single Files:</p>
                      <ul className="text-blue-600 space-y-1">
                        <li>• test_agents/danger_agent.py</li>
                        <li>• test_agents/crewai/test1crew.py</li>
                        <li>• test_agents/example-codebases/langgraph/customer_service/customer_service.py</li>
                      </ul>
                    </div>
                    <div>
                      <p className="font-medium text-blue-700">Directories:</p>
                      <ul className="text-blue-600 space-y-1">
                        <li>• test_agents/crewai/</li>
                        <li>• test_agents/example-codebases/langgraph/</li>
                        <li>• test_agents/example-codebases/</li>
                      </ul>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  <button
                    onClick={startScan}
                    disabled={isScanning || !selectedFile.trim()}
                    className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                  >
                    {isScanning ? (
                      <>
                        <RefreshCw size={16} className="animate-spin" />
                        Scanning...
                      </>
                    ) : (
                      <>
                        <Play size={16} />
                        Start Scan
                      </>
                    )}
                  </button>
                  {isScanning && (
                    <button
                      onClick={() => setIsScanning(false)}
                      className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                    >
                      <StopCircle size={16} />
                      Stop
                    </button>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Scan Results */}
          {scanResults && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 size={20} />
                  Scan Results
                </CardTitle>
                <CardDescription>
                  Latest security analysis from the MCP server
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs value={activeTab} onValueChange={setActiveTab}>
                  <TabsList className="grid w-full grid-cols-4">
                    <TabsTrigger value="overview">Overview</TabsTrigger>
                    <TabsTrigger value="risks">Risks</TabsTrigger>
                    <TabsTrigger value="constraints">Constraints</TabsTrigger>
                    <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
                  </TabsList>

                  <TabsContent value="overview" className="mt-6 space-y-6">
                    {/* Scan Status */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-3">
                        {scanResults.success ? (
                          <CheckCircle size={20} className="text-green-600" />
                        ) : (
                          <AlertTriangle size={20} className="text-red-600" />
                        )}
                        <div>
                          <p className="font-medium">
                            {scanResults.success ? 'Scan completed successfully' : 'Scan failed'}
                          </p>
                          <p className="text-sm text-muted-foreground">
                            {scanResults.message || 'Analysis complete'}
                          </p>
                        </div>
                      </div>
                      {scanResults.timestamp && (
                        <span className="text-sm text-muted-foreground">
                          {new Date(scanResults.timestamp).toLocaleString()}
                        </span>
                      )}
                    </div>

                    {/* File Information */}
                    {scanResults.file_path && (
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <p className="text-sm font-medium text-blue-800 mb-1">File Analyzed:</p>
                        <p className="text-sm text-blue-600 font-mono break-all">{scanResults.file_path}</p>
                        {scanResults.yaml_path && (
                          <div className="mt-2">
                            <p className="text-sm font-medium text-blue-800 mb-1">YAML Configuration:</p>
                            <p className="text-sm text-blue-600 font-mono break-all">{scanResults.yaml_path}</p>
                            <span className={`inline-block px-2 py-1 text-xs rounded-full mt-1 ${
                              scanResults.yaml_exists ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                            }`}>
                              {scanResults.yaml_exists ? 'Found' : 'Not found'}
                            </span>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Metrics Grid */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="p-4 bg-red-50 rounded-lg">
                        <p className="text-sm font-medium text-red-800">Critical Risks</p>
                        <p className="text-2xl font-bold text-red-600">
                          {scanResults.risks?.filter(r => r.severity === 'critical').length || 0}
                        </p>
                      </div>
                      <div className="p-4 bg-yellow-50 rounded-lg">
                        <p className="text-sm font-medium text-yellow-800">Medium Risks</p>
                        <p className="text-2xl font-bold text-yellow-600">
                          {scanResults.risks?.filter(r => r.severity === 'medium').length || 0}
                        </p>
                      </div>
                      <div className="p-4 bg-blue-50 rounded-lg">
                        <p className="text-sm font-medium text-blue-800">Constraints</p>
                        <p className="text-2xl font-bold text-blue-600">{scanResults.constraints_count || 0}</p>
                      </div>
                      <div className="p-4 bg-green-50 rounded-lg">
                        <p className="text-sm font-medium text-green-800">Total Risks</p>
                        <p className="text-2xl font-bold text-green-600">{scanResults.risks_count || 0}</p>
                      </div>
                    </div>

                    {/* Agent Context */}
                    {scanResults.agent_context && (
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <h4 className="font-medium mb-3">Agent Context Analysis</h4>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${scanResults.agent_context.has_prompt_injection_risk ? 'bg-red-500' : 'bg-green-500'}`}></div>
                            <span className="text-sm">Prompt Injection Risk</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${scanResults.agent_context.has_code_execution_capability ? 'bg-red-500' : 'bg-green-500'}`}></div>
                            <span className="text-sm">Code Execution</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${scanResults.agent_context.has_network_access ? 'bg-yellow-500' : 'bg-green-500'}`}></div>
                            <span className="text-sm">Network Access</span>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Effectiveness Analysis */}
                    {scanResults.effectiveness_analysis && (
                      <div className="p-4 bg-purple-50 rounded-lg">
                        <h4 className="font-medium mb-3">Hardening Effectiveness</h4>
                        <div className="flex items-center gap-4">
                          <div>
                            <p className={`text-lg font-bold ${getEffectivenessColor(scanResults.effectiveness_analysis.effectiveness)}`}>
                              {scanResults.effectiveness_analysis.effectiveness.toUpperCase()} Effectiveness
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {scanResults.effectiveness_analysis.addressed_risks} of {scanResults.effectiveness_analysis.total_risks} risks addressed
                            </p>
                          </div>
                          <div className="flex-1 bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                              style={{ 
                                width: `${(scanResults.effectiveness_analysis.addressed_risks / scanResults.effectiveness_analysis.total_risks) * 100}%` 
                              }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="risks" className="mt-6 space-y-4">
                    {scanResults.risks && scanResults.risks.length > 0 ? (
                      <div className="space-y-4">
                        {scanResults.risks.map((risk, index) => (
                          <Card key={index} className="border-l-4 border-l-red-500">
                            <CardContent className="p-4">
                              <div className="flex items-start justify-between gap-4">
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-2">
                                    <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(risk.severity)}`}>
                                      {risk.severity.toUpperCase()}
                                    </span>
                                    <span className="text-sm text-muted-foreground">Risk #{index + 1}</span>
                                  </div>
                                  <p className="text-sm mb-2">{risk.description}</p>
                                  {risk.impact && (
                                    <p className="text-xs text-muted-foreground">
                                      <strong>Impact:</strong> {risk.impact}
                                    </p>
                                  )}
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <Shield size={48} className="mx-auto mb-4 opacity-50" />
                        <p>No risks detected in this scan</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="constraints" className="mt-6 space-y-4">
                    {scanResults.constraints && scanResults.constraints.length > 0 ? (
                      <div className="space-y-4">
                        {scanResults.constraints.map((constraint, index) => (
                          <Card key={index} className="border-l-4 border-l-yellow-500">
                            <CardContent className="p-4">
                              <div className="flex items-start justify-between gap-4">
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-2">
                                    <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(constraint.severity)}`}>
                                      {constraint.severity.toUpperCase()}
                                    </span>
                                    <span className="text-sm text-muted-foreground">Constraint #{index + 1}</span>
                                  </div>
                                  <p className="text-sm">{constraint.description}</p>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <FileText size={48} className="mx-auto mb-4 opacity-50" />
                        <p>No security constraints identified</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="recommendations" className="mt-6 space-y-4">
                    {scanResults.hardened_code && scanResults.hardened_code.length > 0 ? (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h4 className="font-medium">Security Recommendations</h4>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => setShowCode(!showCode)}
                              className="flex items-center gap-2 px-3 py-1 text-sm bg-gray-100 rounded-md hover:bg-gray-200"
                            >
                              {showCode ? <EyeOff size={16} /> : <Eye size={16} />}
                              {showCode ? 'Hide' : 'Show'} Code
                            </button>
                            <button
                              onClick={() => copyToClipboard(scanResults.hardened_code!.join('\n'))}
                              className="flex items-center gap-2 px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200"
                            >
                              <Copy size={16} />
                              Copy
                            </button>
                          </div>
                        </div>
                        
                        {showCode && (
                          <div className="bg-gray-900 text-green-400 p-4 border rounded-md font-mono text-sm overflow-x-auto">
                            <pre className="whitespace-pre-wrap">{scanResults.hardened_code.join('\n')}</pre>
                          </div>
                        )}
                        
                        <div className="p-4 bg-blue-50 rounded-lg">
                          <h5 className="font-medium text-blue-800 mb-2">Implementation Notes:</h5>
                          <ul className="text-sm text-blue-700 space-y-1">
                            <li>• Review the generated code before implementing</li>
                            <li>• Test thoroughly in a development environment</li>
                            <li>• Consider the impact on existing functionality</li>
                            <li>• Update your security documentation accordingly</li>
                          </ul>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        <Code size={48} className="mx-auto mb-4 opacity-50" />
                        <p>No security recommendations available</p>
                      </div>
                    )}
                  </TabsContent>
                </Tabs>
            </CardContent>
          </Card>
          )}

          {/* Scan History */}
          {scanHistory.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText size={20} />
                  Scan History
                </CardTitle>
                <CardDescription>
                  Previous security scans and their results
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {scanHistory.slice(0, 6).map((scan, index) => (
                    <div 
                      key={index} 
                      className="p-4 border rounded-lg hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => setScanResults(scan)}
                    >
                      <div className="flex items-start justify-between mb-2 gap-2">
                        <div className="flex-1 min-w-0">
                          <p className="font-medium text-sm truncate">
                            {scan.file_path ? scan.file_path.split('/').pop() : 'Unknown file'}
                          </p>
                          <p className="text-xs text-muted-foreground mt-1">
                            {scan.timestamp ? new Date(scan.timestamp).toLocaleString() : 'No timestamp'}
                          </p>
                        </div>
                        <span className={`flex-shrink-0 px-2 py-1 text-xs rounded-full ml-2 ${
                          scan.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {scan.success ? 'Success' : 'Failed'}
                        </span>
                      </div>
                      
                      <div className="flex gap-2 mt-3">
                        {scan.risks && scan.risks.filter((r: any) => r.severity === 'critical').length > 0 && (
                          <span className="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">
                            {scan.risks.filter((r: any) => r.severity === 'critical').length} Critical
                          </span>
                        )}
                        {scan.risks && scan.risks.filter((r: any) => r.severity === 'medium').length > 0 && (
                          <span className="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800">
                            {scan.risks.filter((r: any) => r.severity === 'medium').length} Medium
                          </span>
                        )}
                      </div>
                      
                      <p className="text-xs text-muted-foreground mt-2">
                        {scan.message || 'Scan completed'}
                      </p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </AppLayout>
  );
};

export default VulnerabilityScan; 
