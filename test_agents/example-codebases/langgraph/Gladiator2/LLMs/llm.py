# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. import logging
# 3. 
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. import streamlit as st
# 3. 
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. from typing import Literal, TypedDict, List
# 3. from langchain_core.messages import BaseMessage
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. from typing import Dict, Callable, Any
# 3. 
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. import os
# 3. 
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. from typing import Optional
# 2. from fastapi import FastAPI, HTTPException
# 3. from pydantic import BaseModel
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. 
# 3. Security Mitigation: Sanitize user input to prevent prompt injection.
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import os
# 2. import uuid
# 3. import re
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. Hardened code example demonstrating input sanitization and human-in-the-loop for sensitive tools.
# 2. Import necessary libraries
# 3. from langgraph.graph import StateGraph, END
#
# 🤖 AI Security Analysis Summary
# Generated by AutoHardener with Claude analysis
#
# Key security improvements:
# 1. import re
# 2. from typing import Literal
# 3. from langgraph.graph import StateGraph
#
import os
import boto3
from botocore.config import Config

from dotenv import load_dotenv

from langchain_openai import AzureChatOpenAI
from langchain_aws import ChatBedrock

# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
# ⚠️ Medium risk: bind_tools usage detected
# 💡 Validate tools before binding to LLM
from Tools.tools import tools
load_dotenv()

azure_llm = AzureChatOpenAI(
    deployment_name="gpt-3",
    model_name="gpt-3 1106",
    api_version="2023-06-01-preview",
    streaming=True)
azure_llm = azure_llm.bind_tools(tools)

boto3_session = boto3.Session(
    aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
    aws_secret_access_key= os.getenv('AWS_SECRET_ACCESS_KEY'),
    region_name=os.getenv('AWS_REGION')
)
bedrock_client = boto3_session.client("bedrock-runtime", config=Config(region_name=os.getenv('AWS_REGION')))
aws_llm = ChatBedrock(
    model_id = 'meta.llama3-1-8b-instruct-v1:0',
    client = bedrock_client
)
